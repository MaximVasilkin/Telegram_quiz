import asyncio
import logging
import random
from aiogram import html, Router, Bot, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ErrorEvent, User, CallbackQuery, FSInputFile
from keyboards import get_start_button
from quiz import KINESTHETIC, VISUAL, AUDIAL, QUIZ_LEN, PSYCHOTYPES
from states import QuizStates
from utils import collect_answer, replace_old_question
import redis.asyncio as async_redis

router = Router()
logger = logging.getLogger()


#  –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞
@router.error()
async def error_handler(event: ErrorEvent, bot: Bot, event_from_user: User):
    logger.critical('Error caused by %s', event.exception, exc_info=True)
    await bot.send_message(event_from_user.id,
                           '–í–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ - /start')


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext, bot: Bot) -> None:
    user_data = await state.get_data()
    previous_message_id = user_data.get('previous_message_id')

    if previous_message_id is not None:
        try:
            await bot.delete_message(message.chat.id, previous_message_id)
        except TelegramBadRequest:
            pass

    scores = {KINESTHETIC: 0, VISUAL: 0, AUDIAL: 0}
    await state.set_data({'scores': scores})
    await state.set_state(QuizStates.quiz_in_progress)

    start_message = f'{html.bold(html.quote(message.from_user.first_name))}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!\n\n' \
                    f'–†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –≤–µ–±–∏–Ω–∞—Ä ' \
                    f'{html.italic("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –≤ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ")}.\n' \
                    f'–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ä–µ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –ª—é–¥–µ–π.\n\n' \
                    f'üåø–ê —Ç–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –≤–∞–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞. ' \
                    f'–£–∑–Ω–∞–π—Ç–µ –∫–∞–∫–æ–π —Å–∞–¥ –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞! \n' \
                    f'–ù–∞—á–∏–Ω–∞–µ–º?'

    keyboard = get_start_button('–ö–æ–Ω–µ—á–Ω–æ!')

    sent_message = await message.answer(start_message, reply_markup=keyboard)

    await state.update_data(previous_message_id=sent_message.message_id)


@router.callback_query(F.data == 'start', StateFilter(QuizStates.quiz_in_progress))
async def start_quiz(callback: CallbackQuery,
                     state: FSMContext) -> None:
    user_data = await state.get_data()
    previous_message_id = user_data.get('previous_message_id')
    await replace_old_question(callback.message, 0, previous_message_id)


@router.callback_query(F.data, StateFilter(QuizStates.quiz_in_progress))
async def answering(callback: CallbackQuery,
                    state: FSMContext,
                    bot: Bot,
                    redis_client: async_redis.Redis) -> None:
    answer = callback.data
    await collect_answer(answer, state)

    user_data = await state.get_data()

    previous_message_id = user_data.get('previous_message_id')
    current_question_index = user_data.get('current_question_position', 0)
    next_question_index = current_question_index + 1

    if next_question_index > QUIZ_LEN - 1:
        chat_id = callback.message.chat.id
        message_id = callback.message.message_id

        scores = sorted(user_data['scores'].items(), key=lambda x: x[1], reverse=True)
        max_scored_psychotype, max_score = scores[0]

        scored_psychotypes = '\n'.join(f'{PSYCHOTYPES[psychotype]["garden"].title()} - {(score * 100) // QUIZ_LEN}%'
                                       for psychotype, score in scores)

        users_psychotype_eng = random.choice(tuple(filter(lambda x: x[1] == max_score, scores)))[0]
        users_psychotype = PSYCHOTYPES[users_psychotype_eng]
        psychotype_garden = users_psychotype['garden']
        psychotype_description = users_psychotype['description']

        p_s_ = html.italic(('–û —Ç–æ–º, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∞–¥ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è, '
                            '–Ω–æ –∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –Ω–∞ –Ω–∞—à–µ–º –≤–µ–±–∏–Ω–∞—Ä–µ, '
                            '–ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –≤ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ. \n'
                            '–î–æ –≤—Å—Ç—Ä–µ—á–∏ 4 –∏—é–Ω—è! \n\n'
                            '–° –ª—é–±–æ–≤—å—é, \n'
                            f'{html.bold("Garden Group")}üçÄ'))

        result = (f'{html.italic(html.bold(f"–í–∞—à —Å–∞–¥ - {psychotype_garden}"))}'
                  f'{psychotype_description}\n\n'
                  f'{html.underline("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")} \n\n'
                  f'{scored_psychotypes}\n\n'
                  f'–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ: /start\n\n'
                  f'{p_s_}')

        await bot.delete_message(callback.message.chat.id, previous_message_id)
        await asyncio.sleep(0.33)

        cached_photo_id = await redis_client.get(users_psychotype_eng)

        if cached_photo_id is None:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

            image_from_pc = FSInputFile(users_psychotype['image'])

            sent_message = await bot.send_photo(chat_id=chat_id,
                                                photo=image_from_pc,
                                                caption=result)

            widest_photo_id = max(sent_message.photo, key=lambda f: f.width).file_id
            await redis_client.set(users_psychotype_eng, widest_photo_id)
        else:
            sent_message = await bot.send_photo(chat_id=chat_id,
                                                photo=cached_photo_id,
                                                caption=result)

        await state.update_data(previous_message_id=sent_message.message_id)
        await state.set_state(state=None)
        return

    await replace_old_question(callback.message, next_question_index, previous_message_id)
    await state.update_data(current_question_position=next_question_index)


@router.callback_query()
async def on_restart(callback: CallbackQuery, bot: Bot):
    message = callback.message
    await bot.delete_message(message.chat.id, message.message_id)
    await asyncio.sleep(0.33)
    await message.answer('–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start')
